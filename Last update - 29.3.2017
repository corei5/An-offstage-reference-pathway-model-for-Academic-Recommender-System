import nltk
import textract
import re
from nltk import pos_tag, word_tokenize

from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfpage import PDFPage
from cStringIO import StringIO

def find_string(string):
    string_list = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
    if string.lower() in string_list:
        return True
    else:
        return False

def find_number(num):
    num_list = ['1','2','3','4','5','6','7','8','9']
    if num in num_list:
        return True
    else:
        return False

def find_fastsine(sine):
    sine_list = ['(','{','[']
    if sine in sine_list:
        return True
    else:
        return False

def find_lastsine(sine):
    sine_list = [')','}',']']
    if sine in sine_list:
        return True
    else:
        return False

def remove_secondbra(word):
        if '{' in word:
            return True
        else:
            return False


def remove_secondbra_close(word):
    if '}' in word:
        return True
    else:
        return False

def convert_pdf_to_txt(path):
    rsrcmgr = PDFResourceManager()
    retstr = StringIO()
    codec = 'utf-8'
    laparams = LAParams()
    device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams)
    fp = file(path, 'rb')
    interpreter = PDFPageInterpreter(rsrcmgr, device)
    password = ""
    maxpages = 0
    caching = True
    pagenos = set()

    for page in PDFPage.get_pages(fp, pagenos, maxpages=maxpages, password=password, caching=caching,check_extractable=True):
        interpreter.process_page(page)

    text = retstr.getvalue()

    fp.close()
    device.close()
    retstr.close()
    fo = open("output.txt", "wb")
    fo.write(text)
    fo.close()
    return text


convert_pdf_to_txt('exa.pdf')
f = open('output.txt', 'rU').read()

# print(f)

f1 = f.decode('utf-8')

sentence = pos_tag(word_tokenize(f1))

# print(sentence)

for word, pos in sentence:
    if pos == 'VB':
        #print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VBD':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VBG':
     #  print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VBN':
     #  print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VBP':
     #  print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VBZ':
     #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VD':
     #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VDD':
     #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VDG':
     #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VDN':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VDZ':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VDP':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VH':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VHD':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VHG':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VHN':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VHZ':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')
    if pos == 'VHP':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VV':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VVD':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VVG':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VVN':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VVP':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

    if pos == 'VVZ':
        #   print(word.encode("utf-8"))
        with open('verb.txt', 'a') as out:
            out.write(word.encode("utf-8") + '\n')

with open('output.txt', 'r') as f:
    for line in f:
        for word in line.split():
            if any(str.isdigit(i) for i in word) and len(word) > 2 and len(word) < 20 and (find_number(word[0]) == False or word[len(word)-1]=='.')  and find_number(word[len(word)-4])==False  and find_fastsine(word)==False and word[0] != '[' and remove_secondbra(word)==False and remove_secondbra_close(word)==False and find_string(word[1])==True :
               # print(word[0])
                with open('aa.txt', 'a') as out:
                    out.write(word + '\n')
